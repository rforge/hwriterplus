
R version 2.15.0 (2012-03-30)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


 Read .Rprofile
> ### Browser Example
> ### This example is intended to show all the capability of hwriterPlus
> ### to produce an HTML document for display in a browser
> ###
> ### This version produces the header information for use with MathJax
> ###
> ### DJS 27/08/2011
> date()
[1] "Sat Sep 01 19:17:12 2012"
> options(width=80)
> 
> ### Set some state variables
> opSys <- Sys.info()["sysname"]
> if (opSys == "Windows"){
+   linux <- FALSE
+ } else {
+   linux <- TRUE
+ }
> 
> reportName <- "BrowserExampleMathJax.html"
> 
> ### Packages required
> require(hwriterPlus)
Loading required package: hwriterPlus
Loading required package: hwriter
Loading required package: TeachingDemos
> require(Cairo)
Loading required package: Cairo
> require(xtable)
Loading required package: xtable
> require(MASS)
Loading required package: MASS
> require(lattice)
Loading required package: lattice
> 
> ### Break function
> br <- function(page){
+   hwrite("", page, br = TRUE)
+ }
> ### Open file for writing
> p <- newPage(reportName,
+              title = "Example of a Document for Display in a Browser",
+              link.css = c("../css/BrowserExample.css"),
+              link.javascript =
+              c("http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"))
> br(p)
> 
> ### Check if values have been set
> hwriterEquation
[1] 0
> hwriterEquationList
character(0)
> 
> hwrite("<span class = 'title'>
+        Example of a Document for Display in a Browser</span>",
+        p, center = TRUE, br = TRUE)
> hwrite("<span class = 'subtitle'>
+        Dr David J Scott</span>",
+        p, center = TRUE, br = TRUE)
> hwrite(hwrite("Entering Text", name = "intro"), p,
+        heading = 1, center = FALSE, br = TRUE)
> hwrite("Ordinary paragraph text can be entering using
+ <font face = 'monospace' >hwrite</font>.
+ Aspects of the text such as the font family, face, size and colour can
+ be altered in line by using tags or styles.", p,
+        center = FALSE, br = TRUE)
> br(p)
> hwrite("For example the font can be changed to sans-serif
+ <font face = 'Arial, sans-serif'> like this, </font>
+ italic <i> like this, </i> bold <b> like this,</b> coloured
+ <font color = 'blue'> like this,</font> or any combination of these
+ <b><i><font color = 'blue'>like this.</font></i></b>", p, br = TRUE)
> br(p)
> 
> hwrite("Some text variations may not be rendered appropriately as can be
+ seen in the examples above. Classes can be defined in the
+ <span class = 'pkg'>.css</span> file
+ to deal with this problem.", p, br = TRUE)
> br(p)
> 
> hwrite("Incorporating Special Symbols",
+        p, heading = 1, center = FALSE, br = TRUE)
> hwrite("Using appropriate tags and a list of symbols it is possible to
+ output mathematical and other symbols. Superscripts and subscripts are
+ also possible.", p, br = TRUE)
> br(p)
> hwrite("Here are some Greek letters: &alpha;
+ &beta; and &Gamma;,
+ followed by some examples of superscripts and subscripts:
+ &alpha;<sup>2</sup> and &beta;<sub>n</sub>. As examples
+ of other symbols, here are some arrows:
+ &larr;  and &rArr;, some set symbols:
+ &exist;  and &cap;, and some operators:
+ &int;  and &prod;.", p, br = TRUE)
> br(p)
> hwrite("More than one approach is
+ available to produce mathematical symbols.
+ Greek letters can be produced by using symbol font:
+ <font face='symbol, fantasy'>a, b, G</font>, although this may not
+ work in some browsers without the presence of additional fonts.
+ Codes can be used instead of \\(\\LaTeX\\)-like names:
+ &#8592;, &#8747; and &#8719;",
+        p, br = TRUE)
> br(p)
> hwrite("Quotes can be incorporated by escaping with \"\\\",
+ so for example we can obtain \" and \' in the middle of some text.",
+        p, br = TRUE)
> 
> ### Mathematics
> hwrite("Rendering Mathematics", p, id = "mathematics",
+        heading = 1, center = FALSE, br = TRUE)
> hwrite("Entering more complex mathematical expressions including
+ displayed mathematical expressions is difficult.
+ One approach is to insert
+ an image produced by other means, for example by \\(\\LaTeX\\) or Word's
+ equation editor. The following expression was produced by Word's
+ equation editor then saved as a jpeg.",
+        p, br = TRUE)
> br(p)
> hwriteImage("DisplayedEquation.jpg", p, center = TRUE, br = TRUE)
> #hwriteImage("AltDisplayedEquation.jpg", p, center = TRUE, br = TRUE)
> 
> hwrite("To enable the rendering of complex mathematical expressions
+ using \\(\\LaTeX\\) syntax, JavaScript is required, the JavaScript being
+ run when the file is loaded into the browser. The package
+ <span class = 'pkg'> R2HTML</span> uses MathPlayer to do the
+ rendering. An alternative is MathJax which is used by
+ <span class = 'pkg'> org-babel.</span> MathJax is supported by a number of
+ scientific societies and is sponsored by the American Mathematical Society
+ and the Society for Industrial and Applied Mathematics:
+ see <a href = 'http://www.mathjax.org/sponsors/'></a>.
+ MathPlayer does not work reliably in all browsers and may require an
+ add-on to function. MathJax is preferred for these reasons in extending
+ the capabilities of <span class = 'pkg'> hwriter</span> in the
+ <span class = 'pkg'> hwriterPlus</span> package",
+        p, br = TRUE)
> br(p)
> hwrite("Here is an inline expression:\\(\\int_{-\\infty}^{1}f(x)dx\\),
+ followed by two displayed expressions, one of which is numbered and
+ has also been assigned a label.
+ The first example also has a box around it, by assigning the value
+ <font face = 'monospace'> \"border = '1'\"</font> to the argument
+ <font face = 'monospace'> table.attributes</font>.",
+        p, br = TRUE)
> br(p)
> 
> 
> hwriteLatex(as.latex("\\int_{-\\infty}^{1}f(x)dx",
+                      inline = FALSE, count = FALSE),
+             page = p,
+             table.attributes = "border = '1'",
+             tr.attributes = "bgcolor = 'white'")
> 
> hwriteLatex(as.latex("\\{ 26.119 < \\sum_{i=1}^n(X_i-\\bar{X})^2\\}
+ \\bigcup\\ \\{ 5.629 > \\sum_{i=1}^n (X_i-\\bar{X})^2 \\}.",
+                      inline = FALSE, label = "equation1"),
+             page = p,
+             tr.attributes = "bgcolor = 'white'",
+             td.attributes = c("width = '50'", "align = 'center'",
+                               "align = 'right' width = '50'"))
> br(p)
> 
> ### Check again on equation numbering
> hwriterEquation
[1] 1
> hwriterEquationList
[1] "eq:equation1"
> 
> ### Images
> hwrite("Incorporating Images", p,
+        heading = 1, center = FALSE, br = TRUE)
> hwrite("Incorporating images is complicated by the inability of
+ different browsers to display images in different formats.
+ Firefox will not display <span class ='pkg'>.wmf</span> images for example.
+ The only scalable image format which can be displayed by all the
+ common browsers (Internet Explorer, Firefox, Safari and Chrome)
+ appears to be <span class ='pkg'>.svg</span>,
+ scalable vector graphics.",
+         p, center = FALSE, br = TRUE)
> br(p)
> hwrite(paste("Here is a windows metafile, <span class ='pkg'>.wmf</span> image.
+ Unfortunately this will only display in Internet Explorer, and there
+ will be no output produced at all if this example is run on linux.
+ The example is the cats data used by Leisch as an Sweave example,
+ taken from Venables and Ripley (1987).
+ The data frame contains measurements of heart and body weight
+ of ",
+              nrow(cats), " cats (",
+              sum(cats$Sex=='F')," female, ",
+              sum(cats$Sex=='F')," male).", sep = ""),
+        p, center = FALSE, br = TRUE)
> br(p)
> hwrite("A linear regression model of heart weight by sex and gender was
+ fitted to this data. The graph is a scatter plot of the data including
+ the regression lines",
+        p, center = FALSE, br = TRUE)
> br(p)
> ### Fit linear model
> lm1 <- lm(Hwt~Bwt*Sex, data=cats)
> lm1

Call:
lm(formula = Hwt ~ Bwt * Sex, data = cats)

Coefficients:
(Intercept)          Bwt         SexM     Bwt:SexM  
      2.981        2.636       -4.165        1.676  

> lattice.options(theme = "col.whitebg")
> ### Draw graph
> if (!linux) {
+   win.metafile("cats.wmf", height = 4)
+   print(xyplot(Hwt~Bwt|Sex, data=cats, type=c("p", "r")))
+   dev.off()
+   hwriteImage("cats.wmf", p, center = FALSE, br = TRUE)
+ }
> 
> 
> hwrite("Here is the cats data plot in svg format.
+ This uses an extension to hwriter to produce HTML code which enables
+ display in up to date versions of all common browsers.",
+        p, center = FALSE, br = TRUE)
> CairoSVG("cats.svg", width = 4, height = 4)
> lattice.options(theme = "col.whitebg")
> print(xyplot(Hwt~Bwt|Sex, data=cats, type=c("p", "r")))
> dev.off()
null device 
          1 
> hwriteSVG("cats.svg", p, height = 600, width = 600, id = "catsSVG",
+           center = FALSE, br = TRUE)
> 
> hwrite("A further format is png (portable network graphics).
+ This should display in up to date versions of all common browsers.
+ It is a bitmap format however so not scalable.",
+        p, center = FALSE, br = TRUE)
> CairoPNG("cats.png", width = 4*80, height = 4*80)
> 
> lattice.options(theme = "col.whitebg")
> print(xyplot(Hwt~Bwt|Sex, data=cats, type=c("p", "r")))
> dev.off()
null device 
          1 
> hwriteImage("cats.png", p, center = FALSE, br = TRUE)
> 
> hwrite("One problem with images is that the size of the image displayed
+ can vary widely from browser to browser. Obtaining the right sized image
+ for a particular browser may require a lot of trial and error.",
+        p, center = FALSE, br = TRUE)
> 
> ### Vectors, matrices and dataframes
> hwrite("Vectors, Matrices and Dataframes", p,
+        heading = 1, center = FALSE, br = TRUE)
> hwrite("Here is some code producing a character vector", p,
+        center = FALSE, br = TRUE)
> form <- y ~ a + b + c
> example <- as.character(form)
> hwriteOutput(
+ "form <- y ~ a + b + c
+ example <- as.character(form)", p, br = TRUE)
> hwrite("This is the result of printing the vector", p,
+        center = FALSE, br = TRUE)
> hwrite(example, p,
+        center = TRUE, br = TRUE)
> 
> hwrite("Here is some code producing a numeric vector", p,
+        center = FALSE, br = TRUE)
> y <- 3*(1:5)
> hwriteOutput("y <- 3*(1:5)", p, br = TRUE)
> hwrite("This is the result of printing the vector", p,
+        center = FALSE, br = TRUE)
> hwrite(y, p,
+        center = TRUE, br = TRUE)
> hwrite("Here is some code producing a matrix", p,
+        center = FALSE, br = TRUE)
> mdat <- matrix(c(1,2,3, 11,12,13),
+                nrow = 2, ncol = 3, byrow = TRUE,
+                dimnames = list(c('row1', 'row2'),
+                                c('C.1', 'C.2', 'C.3')))
> hwriteOutput(
+ "mdat <- matrix(c(1,2,3, 11,12,13),
+                nrow = 2, ncol = 3, byrow = TRUE,
+                dimnames = list(c('row1', 'row2'),
+                                c('C.1', 'C.2', 'C.3')))",
+              p, br = TRUE)
> hwrite("This is the result of printing the matrix", p,
+        center = FALSE, br = TRUE)
> hwrite(mdat, p,
+        center = TRUE, br = TRUE)
> hwrite("Here is some code producing a dataframe", p,
+        center = FALSE, br = TRUE)
> L3 <- LETTERS[1:3]
> d <- data.frame(cbind(x = 1, y = 1:10),
+                 fac = sample(L3, 10, replace = TRUE))
> hwriteOutput(
+ "L3 <- LETTERS[1:3]
+ d <- data.frame(cbind(x = 1, y = 1:10),
+                 fac = sample(L3, 10, replace = TRUE))",
+              p, center = FALSE, br = TRUE)
> hwrite("This is the result of printing the dataframe", p,
+        center = FALSE, br = TRUE)
> hwrite(d, p,
+        center = TRUE, br = TRUE)
> 
> 
> ### Tables
> hwrite("Tables", p, heading = 2, center = FALSE, br = TRUE)
> hwrite("Here is an example taken from the documentation of
+ <font face='monospace'>xtable</font>. It shows the output of an
+ ANOVA table.",
+        p, br = TRUE)
> br(p)
> require(xtable)
> data(tli)
> fm1 <- aov(tlimth ~ sex + ethnicty + grade + disadvg, data=tli)
> fm1.table <- print(xtable(fm1), type="html")
<!-- html table generated in R 2.15.0 by xtable 1.7-1 package -->
<!-- Sat Sep 01 19:17:13 2012 -->
<TABLE border=1>
<TR> <TH>  </TH> <TH> Df </TH> <TH> Sum Sq </TH> <TH> Mean Sq </TH> <TH> F value </TH> <TH> Pr(&gt F) </TH>  </TR>
  <TR> <TD> sex </TD> <TD align="right"> 1 </TD> <TD align="right"> 75.37 </TD> <TD align="right"> 75.37 </TD> <TD align="right"> 0.38 </TD> <TD align="right"> 0.5417 </TD> </TR>
  <TR> <TD> ethnicty </TD> <TD align="right"> 3 </TD> <TD align="right"> 2572.15 </TD> <TD align="right"> 857.38 </TD> <TD align="right"> 4.27 </TD> <TD align="right"> 0.0072 </TD> </TR>
  <TR> <TD> grade </TD> <TD align="right"> 1 </TD> <TD align="right"> 36.31 </TD> <TD align="right"> 36.31 </TD> <TD align="right"> 0.18 </TD> <TD align="right"> 0.6717 </TD> </TR>
  <TR> <TD> disadvg </TD> <TD align="right"> 1 </TD> <TD align="right"> 59.30 </TD> <TD align="right"> 59.30 </TD> <TD align="right"> 0.30 </TD> <TD align="right"> 0.5882 </TD> </TR>
  <TR> <TD> Residuals </TD> <TD align="right"> 93 </TD> <TD align="right"> 18682.87 </TD> <TD align="right"> 200.89 </TD> <TD align="right">  </TD> <TD align="right">  </TD> </TR>
   </TABLE>
> 
> hwrite(fm1.table, p, center = TRUE, br = TRUE)
> hwrite("Here is an example taken from the documentation of
+ <font face='monospace'>table</font>. It shows the output of a
+ two-dimensional table.",
+        p, br = TRUE)
> br(p)
> require(stats)
> tbl <- print(xtable(table(state.division, state.region)), type = "html")
<!-- html table generated in R 2.15.0 by xtable 1.7-1 package -->
<!-- Sat Sep 01 19:17:13 2012 -->
<TABLE border=1>
<TR> <TH>  </TH> <TH> Northeast </TH> <TH> South </TH> <TH> North Central </TH> <TH> West </TH>  </TR>
  <TR> <TD align="right"> New England </TD> <TD align="right">   6 </TD> <TD align="right">   0 </TD> <TD align="right">   0 </TD> <TD align="right">   0 </TD> </TR>
  <TR> <TD align="right"> Middle Atlantic </TD> <TD align="right">   3 </TD> <TD align="right">   0 </TD> <TD align="right">   0 </TD> <TD align="right">   0 </TD> </TR>
  <TR> <TD align="right"> South Atlantic </TD> <TD align="right">   0 </TD> <TD align="right">   8 </TD> <TD align="right">   0 </TD> <TD align="right">   0 </TD> </TR>
  <TR> <TD align="right"> East South Central </TD> <TD align="right">   0 </TD> <TD align="right">   4 </TD> <TD align="right">   0 </TD> <TD align="right">   0 </TD> </TR>
  <TR> <TD align="right"> West South Central </TD> <TD align="right">   0 </TD> <TD align="right">   4 </TD> <TD align="right">   0 </TD> <TD align="right">   0 </TD> </TR>
  <TR> <TD align="right"> East North Central </TD> <TD align="right">   0 </TD> <TD align="right">   0 </TD> <TD align="right">   5 </TD> <TD align="right">   0 </TD> </TR>
  <TR> <TD align="right"> West North Central </TD> <TD align="right">   0 </TD> <TD align="right">   0 </TD> <TD align="right">   7 </TD> <TD align="right">   0 </TD> </TR>
  <TR> <TD align="right"> Mountain </TD> <TD align="right">   0 </TD> <TD align="right">   0 </TD> <TD align="right">   0 </TD> <TD align="right">   8 </TD> </TR>
  <TR> <TD align="right"> Pacific </TD> <TD align="right">   0 </TD> <TD align="right">   0 </TD> <TD align="right">   0 </TD> <TD align="right">   5 </TD> </TR>
   </TABLE>
> hwrite(tbl, p, center = TRUE, br = TRUE)
> 
> ### Output
> hwrite("R Output", p, heading = 2, center = FALSE, br = FALSE)
> hwrite("To include output from R in a file, the
+ command <code>capture.output</code> is used to record the output.
+ Then the output is included in the HTML file by using the command
+ <code>hwriteOutput</code>, which is not in the package
+  <span class = 'pkg'>hwriter</span>.", p, center = FALSE, br = TRUE)
> hwrite("Here is an example from the <code>glm</code> help.",
+        p, center = FALSE, br = TRUE)
> aggOut <-
+     capture.output(data(iris),
+                    str(iris),
+                    aggregate(Sepal.Length~Species, iris, mean)
+                    )
> aggOut
 [1] "'data.frame':\t150 obs. of  5 variables:"                                                  
 [2] " $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ..."                            
 [3] " $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ..."                          
 [4] " $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ..."                        
 [5] " $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ..."                        
 [6] " $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ..."
 [7] "     Species Sepal.Length"                                                                
 [8] "1     setosa        5.006"                                                                
 [9] "2 versicolor        5.936"                                                                
[10] "3  virginica        6.588"                                                                
> hwriteOutput(
+ "aggOut <-
+     capture.output(data(iris),
+                    str(iris),
+                    aggregate(Sepal.Length~Species, iris, mean)
+                    )",
+              p, center = FALSE, br = TRUE)
> hwrite("This produces the following result.", p, center = FALSE, br = TRUE)
> hwriteOutput(aggOut, p, center = FALSE, br = TRUE)
> hwrite("Note the commas separating the parts of the output to be captured.
+ See the help and examples for <code>capture.output</code> for details.",
+        p, br = TRUE)
> 
> ### R Session
> hwrite("An R Session", p, heading = 2, center = FALSE, br = FALSE)
> hwrite("To capture an R session, or part of one, including both commands
+ and output, the command <code>txtStart</code> from the package
+ <span class = 'pkg'>TeachingDemos</span> can be used then
+ <code>hwriteOutput</code>.
+ This requires writing to a file, and reading the results back
+ from the file. A temporary file can used for holding the output.
+ See <code>?tempfile</code>.",
+        p, center = FALSE, br = TRUE)
> hwrite("Here is an example.",
+        p, center = FALSE, br = TRUE)
> tmpFile <- tempfile("Session")
> #txtStart("Temp1.txt")
> txtStart(tmpFile)
Output being copied to text file,
use txtStop to end
txt> clotting <-
txt+     data.frame(
txt+                u = c(5,10,15,20,30,40,60,80,100),
txt+                lot1 = c(118,58,42,35,27,25,21,19,18),
txt+                lot2 = c(69,35,26,21,18,16,13,12,12)
txt+                )
txt> clotting
    u lot1 lot2
1   5  118   69
2  10   58   35
3  15   42   26
4  20   35   21
5  30   27   18
6  40   25   16
7  60   21   13
8  80   19   12
9 100   18   12
txt> coef(glm(lot1 ~ log(u), data=clotting, family=Gamma))
(Intercept)      log(u) 
-0.01655438  0.01534311 
txt> txtStop()
> #sessionOut <- readLines("Temp1.txt")
> sessionOut <- readLines(tmpFile)
> sessionOut
 [1] "> clotting <- data.frame(u = c(5, 10, 15, 20, 30, 40, 60, 80, 100), "
 [2] "+ lot1 = c(118, 58, 42, 35, 27, 25, 21, 19, 18), lot2 = c(69, "      
 [3] "+ "                                                                  
 [4] "+ 35, 26, 21, 18, 16, 13, 12, 12))"                                  
 [5] "> clotting"                                                          
 [6] "    u lot1 lot2"                                                     
 [7] "1   5  118   69"                                                     
 [8] "2  10   58   35"                                                     
 [9] "3  15   42   26"                                                     
[10] "4  20   35   21"                                                     
[11] "5  30   27   18"                                                     
[12] "6  40   25   16"                                                     
[13] "7  60   21   13"                                                     
[14] "8  80   19   12"                                                     
[15] "9 100   18   12"                                                     
[16] "> coef(glm(lot1 ~ log(u), data = clotting, family = Gamma))"         
[17] "(Intercept)      log(u) "                                            
[18] "-0.01655438  0.01534311 "                                            
> hwriteOutput(sessionOut, p, br = TRUE)
> hwrite("An alternative approach which should not mangle line breaks is provided by the <code>script</code> function written by Ross Ihaka",
+        p, center = FALSE, br = TRUE)
> tmpFile <- tempfile("Session")
> script(tmpFile)
Script started, file is "C:\Users\dsco036\AppData\Local\Temp\RtmpyKRkBJ\Session17fc35316d8d"
script> clotting <-
script+     data.frame(
script+                u = c(5,10,15,20,30,40,60,80,100),
script+                lot1 = c(118,58,42,35,27,25,21,19,18),
script+                lot2 = c(69,35,26,21,18,16,13,12,12)
script+                )
script> clotting
    u lot1 lot2
1   5  118   69
2  10   58   35
3  15   42   26
4  20   35   21
5  30   27   18
6  40   25   16
7  60   21   13
8  80   19   12
9 100   18   12
script> coef(glm(lot1 ~ log(u), data=clotting, family=Gamma))
(Intercept)      log(u) 
-0.01655438  0.01534311 
script> q()
Script done, file is "C:\Users\dsco036\AppData\Local\Temp\RtmpyKRkBJ\Session17fc35316d8d"
> sessionOut <- readLines(tmpFile)
> sessionOut
 [1] "Script started on Sat Sep 01 19:17:13 2012 "            
 [2] "> clotting <-"                                          
 [3] ">     data.frame("                                      
 [4] ">                u = c(5,10,15,20,30,40,60,80,100),"    
 [5] ">                lot1 = c(118,58,42,35,27,25,21,19,18),"
 [6] ">                lot2 = c(69,35,26,21,18,16,13,12,12)"  
 [7] ">                )"                                     
 [8] "> clotting"                                             
 [9] "    u lot1 lot2"                                        
[10] "1   5  118   69"                                        
[11] "2  10   58   35"                                        
[12] "3  15   42   26"                                        
[13] "4  20   35   21"                                        
[14] "5  30   27   18"                                        
[15] "6  40   25   16"                                        
[16] "7  60   21   13"                                        
[17] "8  80   19   12"                                        
[18] "9 100   18   12"                                        
[19] "> coef(glm(lot1 ~ log(u), data=clotting, family=Gamma))"
[20] "(Intercept)      log(u) "                               
[21] "-0.01655438  0.01534311 "                               
[22] "> q()"                                                  
[23] "Script done on Sat Sep 01 19:17:13 2012 "               
> hwriteOutput(sessionOut, p, br = TRUE)
> hwrite("The new function <code>hwriteScript</code> can be used to drop off lines at the beginning and end of the file created by <code>script</code>.",
+        p, center = FALSE, br = TRUE)
> hwriteScript(tmpFile, p, br = TRUE)
> 
> 
> ### Links
> hwrite("Creating Links", p, heading = 2, center = FALSE, br = FALSE)
> hwrite("Since HTML is being produced, it is easy to create links to
+ other websites. Here is an example of a link to the Statistics Department
+ website: ",
+        p, br = FALSE)
> hwrite("The Department of Statistics.", p, br = TRUE,
+        link = 'http://www.stat.auckland.ac.nz/uoa/')
> br(p)
> hwrite("Links may be created within pages using anchors.
+ Destination anchors in HTML documents may be specified either by the
+ <font face = 'monospace'>a</font> element (naming it with the
+ <font face = 'monospace'>name </font> attribute), or by any other
+ element (naming with the <font face = 'monospace'>id</font> attribute).
+ Here is a link to the first section created using the
+ <font face = 'monospace'>a</font> element: ",
+        p, br = FALSE)
> hwrite("Entering Text.", p, br = TRUE,
+        link = "#intro")
> br(p)
> hwrite("Here is a link to the third section created by naming with
+ the <font face = 'monospace'>id</font> attribute: ",
+        p, br = FALSE)
> hwrite("Rendering Mathematics.", p, br = TRUE,
+        link = "#mathematics")
> br(p)
> hwrite("This use of named or identified elements of a documents is
+ how cross-referencing can be implemented.",
+        p, br = TRUE)
> br(p)
> hwrite("The numbered equation entered previously can be cross-referenced
+ using the link argument to <font face = 'monospace'>hwrite</font>.
+ That equation is equation 1 at present. Here is the link to the equation: ",
+        p, br = FALSE)
> hwrite("Numbered Equation.", p, br = TRUE,
+        link = "#eq:equation1")
> ### Test paste
> paste("We can also retrieve the number of a labeled equation.
+ For example the numbered equation was the first equation and had the label
+ \"equation1\" which in full is \"eq:equation1\". We can retrieve the number
+ using <code> which(hwriterEquationList == \"eq:equation1\")
+ </code>",which(hwriterEquationList == "eq:equation1"), "or more simply using
+ the convenience function <code>eqRef</code>, by <code>eqRef(\"equation1\") ")
[1] "We can also retrieve the number of a labeled equation.\nFor example the numbered equation was the first equation and had the label\n\"equation1\" which in full is \"eq:equation1\". We can retrieve the number\nusing <code> which(hwriterEquationList == \"eq:equation1\")\n</code> 1 or more simply using\nthe convenience function <code>eqRef</code>, by <code>eqRef(\"equation1\") "
> 
> hwrite(paste("We can also retrieve the number of a labeled equation.
+ For example the numbered equation was the first equation and had the label
+ \"equation1\" which in full is \"eq:equation1\". We can retrieve the number
+ using <code> which(hwriterEquationList == \"eq:equation1\")</code>
+ which produces ",which(hwriterEquationList == "eq:equation1"),
+ "or more easily using the convenience function <code>eqRef</code>,
+ using simply <code>eqRef(\"equation1\")</code>."),
+        p, br = TRUE)
> br(p)
> hwrite("The graph in SVG format included previously can also be
+ cross-referenced since it was assigned an identifier using the
+ <font face = 'monospace'>id</font> attribute.
+ Here is a link to that graph: ",
+        p, br = FALSE)
> hwrite("Graph in SVG format.", p, br = TRUE,
+        link = "#catsSVG")
> br(p)
> ### Close file
> closePage(p)
> 
> directory <- getwd()
> reportName <- paste("file://", directory, "/", reportName, sep = "")
> reportName
[1] "file://c:/Users/dsco036/Documents/Research/Packages/hwriterPlusDevel/hwriterplus/pkg/hwriterPlus/inst/examples/BrowserExampleMathJax.html"
> 
> browseURL(reportName)
> 
> q(save = "no")
> proc.time()
   user  system elapsed 
   1.17    0.15    1.43 
